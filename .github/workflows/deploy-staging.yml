name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        continue-on-error: true

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true

      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: api
          file: api/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/exitsaas-api:latest
            ${{ secrets.DOCKER_REGISTRY }}/exitsaas-api:${{ github.sha }}
        continue-on-error: true

      - name: Build and push Web image
        uses: docker/build-push-action@v4
        with:
          context: web
          file: web/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/exitsaas-web:latest
            ${{ secrets.DOCKER_REGISTRY }}/exitsaas-web:${{ github.sha }}
        continue-on-error: true

      - name: Deploy to server
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Pull latest code
          git pull origin ${{ github.ref_name }}
          
          # Copy environment file
          cp .env.${{ github.event.inputs.environment || 'staging' }} .env
          
          # Deploy with docker-compose
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          
          # Run migrations
          docker-compose exec -T api npm run migrate
          
          # Run health checks
          docker-compose exec -T api curl -f http://localhost:3000/health
          docker-compose exec -T web curl -f http://localhost/
          
          echo "Deployment successful!"
          EOF
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        continue-on-error: true

      - name: Send notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Deployment to ${{ github.event.inputs.environment || 'staging' }} - ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        continue-on-error: true
