import { Component, signal, computed, OnInit, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';

interface PlanTemplate {
  id: number;
  name: string;
  description: string;
  price: number;
  billing_cycle: string;
  features: string[];
  max_users: number | null;
  max_storage_gb: number | null;
  status: string;
  created_at: string;
  updated_at: string;
}

@Component({
  selector: 'app-plan-templates',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <div class="p-4 sm:p-6 space-y-4">
      <!-- Header -->
      <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
        <div>
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Plan Templates</h1>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
            Manage subscription plans offered to customers
          </p>
        </div>
        <button
          (click)="showCreateModal = true"
          class="inline-flex items-center gap-1.5 px-3 py-1.5 text-xs font-medium bg-primary-600 text-white rounded hover:bg-primary-700 transition shadow-sm"
        >
          <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
          </svg>
          Create Plan
        </button>
      </div>

      <!-- Plans Grid -->
      @if (plans().length === 0) {
        <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-12 text-center">
          <span class="text-5xl mb-4 block">üìÜ</span>
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">No plan templates</h3>
          <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">
            Create your first subscription plan template
          </p>
          <button
            (click)="showCreateModal = true"
            class="inline-flex items-center gap-1.5 px-3 py-1.5 text-xs font-medium bg-primary-600 text-white rounded hover:bg-primary-700 transition"
          >
            <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
            </svg>
            Create First Plan
          </button>
        </div>
      } @else {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          @for (plan of plans(); track plan.id) {
            <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-lg transition">
              <!-- Plan Header -->
              <div class="p-4 border-b border-gray-200 dark:border-gray-700">
                <div class="flex items-start justify-between mb-2">
                  <div class="flex-1">
                    <h3 class="text-lg font-bold text-gray-900 dark:text-white">{{ plan.name }}</h3>
                    <p class="text-xs text-gray-600 dark:text-gray-400 mt-1">{{ plan.description }}</p>
                  </div>
                  <span
                    class="px-2 py-0.5 text-xs font-medium rounded-full"
                    [class]="plan.isActive ? 'bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300' : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'"
                  >
                    {{ plan.isActive ? '‚úì Active' : 'Inactive' }}
                  </span>
                </div>

                <div class="flex items-baseline gap-1 mt-3">
                  <span class="text-3xl font-bold text-gray-900 dark:text-white">{{ plan.currency }} {{ plan.price }}</span>
                  <span class="text-sm text-gray-500 dark:text-gray-400">/{{ plan.billingCycle }}</span>
                </div>

                @if (plan.trialDays > 0) {
                  <div class="mt-2 inline-flex items-center gap-1 px-2 py-0.5 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 text-xs font-medium rounded">
                    üéÅ {{ plan.trialDays }} days free trial
                  </div>
                }
              </div>

              <!-- Features -->
              <div class="p-4">
                <h4 class="text-xs font-semibold text-gray-700 dark:text-gray-300 mb-2 uppercase">Features</h4>
                <ul class="space-y-1.5">
                  @for (feature of plan.features; track $index) {
                    <li class="flex items-start gap-2 text-xs text-gray-600 dark:text-gray-400">
                      <svg class="w-3.5 h-3.5 text-green-500 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                      </svg>
                      {{ feature }}
                    </li>
                  }
                </ul>
              </div>

              <!-- Stats -->
              <div class="px-4 py-3 bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700">
                <div class="flex items-center gap-2 text-xs text-gray-600 dark:text-gray-400">
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"/>
                  </svg>
                  <span>{{ plan.subscriberCount }} active subscribers</span>
                </div>
              </div>

              <!-- Actions -->
              <div class="p-3 border-t border-gray-200 dark:border-gray-700 flex items-center gap-2">
                <button
                  (click)="editPlan(plan)"
                  class="flex-1 inline-flex items-center justify-center gap-1 px-3 py-1.5 text-xs font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-900/30 rounded transition"
                >
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                  </svg>
                  Edit
                </button>
                <button
                  (click)="duplicatePlan(plan)"
                  class="flex-1 inline-flex items-center justify-center gap-1 px-3 py-1.5 text-xs font-medium text-purple-600 dark:text-purple-400 bg-purple-50 dark:bg-purple-900/20 hover:bg-purple-100 dark:hover:bg-purple-900/30 rounded transition"
                >
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                  </svg>
                  Copy
                </button>
                <button
                  (click)="deletePlan(plan.id)"
                  class="inline-flex items-center justify-center gap-1 px-2 py-1.5 text-xs font-medium text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 hover:bg-red-100 dark:hover:bg-red-900/30 rounded transition"
                >
                  <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                  </svg>
                </button>
              </div>
            </div>
          }
        </div>
      }

      <!-- Create/Edit Modal -->
      @if (showCreateModal || showEditModal) {
        <div class="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <!-- Modal Header -->
            <div class="sticky top-0 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4 flex items-center justify-between">
              <h2 class="text-lg font-bold text-gray-900 dark:text-white">
                {{ showCreateModal ? 'Create Plan Template' : 'Edit Plan Template' }}
              </h2>
              <button
                (click)="closeModal()"
                class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
              </button>
            </div>

            <!-- Modal Body -->
            <div class="p-6 space-y-4">
              <!-- Basic Info -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Plan Name *</label>
                  <input
                    type="text"
                    [(ngModel)]="formData.name"
                    placeholder="e.g., Professional Plan"
                    class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500"
                  />
                </div>

                <div>
                  <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Billing Cycle *</label>
                  <select
                    [(ngModel)]="formData.billingCycle"
                    class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500"
                  >
                    <option value="monthly">üìÖ Monthly</option>
                    <option value="quarterly">üìÜ Quarterly</option>
                    <option value="yearly">üóìÔ∏è Yearly</option>
                  </select>
                </div>
              </div>

              <div>
                <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Description</label>
                <textarea
                  [(ngModel)]="formData.description"
                  rows="2"
                  placeholder="Brief description of the plan"
                  class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500"
                ></textarea>
              </div>

              <!-- Pricing -->
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Currency</label>
                  <select
                    [(ngModel)]="formData.currency"
                    class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500"
                  >
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                    <option value="GBP">GBP</option>
                  </select>
                </div>

                <div>
                  <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Price *</label>
                  <input
                    type="number"
                    [(ngModel)]="formData.price"
                    step="0.01"
                    min="0"
                    placeholder="0.00"
                    class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500"
                  />
                </div>

                <div>
                  <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Trial Days</label>
                  <input
                    type="number"
                    [(ngModel)]="formData.trialDays"
                    min="0"
                    placeholder="0"
                    class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500"
                  />
                </div>
              </div>

              <!-- Features -->
              <div>
                <label class="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Features</label>
                <div class="space-y-2">
                  @for (feature of formData.features; track $index; let i = $index) {
                    <div class="flex items-center gap-2">
                      <input
                        type="text"
                        [(ngModel)]="formData.features[i]"
                        placeholder="Feature description"
                        class="flex-1 px-3 py-1.5 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-900 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500"
                      />
                      <button
                        (click)="removeFeature(i)"
                        class="p-1.5 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                        </svg>
                      </button>
                    </div>
                  }
                  <button
                    (click)="addFeature()"
                    class="inline-flex items-center gap-1 px-3 py-1.5 text-xs font-medium text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20 hover:bg-primary-100 dark:hover:bg-primary-900/30 rounded transition"
                  >
                    <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                    </svg>
                    Add Feature
                  </button>
                </div>
              </div>

              <!-- Active Status -->
              <div>
                <label class="flex items-center gap-2">
                  <input
                    type="checkbox"
                    [(ngModel)]="formData.isActive"
                  />
                  <span class="text-sm text-gray-700 dark:text-gray-300">Make this plan available to customers</span>
                </label>
              </div>
            </div>

            <!-- Modal Footer -->
            <div class="sticky bottom-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 px-6 py-4 flex items-center justify-end gap-3">
              <button
                (click)="closeModal()"
                class="inline-flex items-center gap-1.5 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-50 dark:hover:bg-gray-600 transition"
              >
                Cancel
              </button>
              <button
                (click)="savePlan()"
                class="inline-flex items-center gap-1.5 px-4 py-2 text-sm font-medium bg-primary-600 text-white rounded hover:bg-primary-700 transition shadow-sm"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                </svg>
                {{ showCreateModal ? 'Create Plan' : 'Save Changes' }}
              </button>
            </div>
          </div>
        </div>
      }
    </div>
  `
})
export class PlanTemplatesComponent {
  plans = signal<PlanTemplate[]>([
    {
      id: 1,
      name: 'Starter',
      description: 'Perfect for small teams',
      price: 49.99,
      currency: 'USD',
      billingCycle: 'monthly',
      trialDays: 14,
      features: ['Up to 5 users', 'Basic support', '10GB storage', 'Email support'],
      isActive: true,
      subscriberCount: 24
    },
    {
      id: 2,
      name: 'Professional',
      description: 'For growing businesses',
      price: 149.99,
      currency: 'USD',
      billingCycle: 'monthly',
      trialDays: 14,
      features: ['Up to 25 users', 'Priority support', '100GB storage', 'Advanced analytics', 'API access'],
      isActive: true,
      subscriberCount: 12
    },
    {
      id: 3,
      name: 'Enterprise',
      description: 'For large organizations',
      price: 299.99,
      currency: 'USD',
      billingCycle: 'monthly',
      trialDays: 30,
      features: ['Unlimited users', '24/7 support', '1TB storage', 'Custom integrations', 'SLA guarantee', 'Dedicated account manager'],
      isActive: true,
      subscriberCount: 5
    }
  ]);

  showCreateModal = false;
  showEditModal = false;
  editingPlanId: number | null = null;

  formData = {
    name: '',
    description: '',
    price: 0,
    currency: 'USD',
    billingCycle: 'monthly' as 'monthly' | 'quarterly' | 'yearly',
    trialDays: 0,
    features: [''],
    isActive: true
  };

  editPlan(plan: PlanTemplate) {
    this.editingPlanId = plan.id;
    this.formData = {
      name: plan.name,
      description: plan.description,
      price: plan.price,
      currency: plan.currency,
      billingCycle: plan.billingCycle,
      trialDays: plan.trialDays,
      features: [...plan.features],
      isActive: plan.isActive
    };
    this.showEditModal = true;
  }

  duplicatePlan(plan: PlanTemplate) {
    const newPlan: PlanTemplate = {
      ...plan,
      id: Math.max(...this.plans().map(p => p.id)) + 1,
      name: `${plan.name} (Copy)`,
      subscriberCount: 0
    };
    this.plans.update(plans => [...plans, newPlan]);
  }

  deletePlan(id: number) {
    if (confirm('Are you sure you want to delete this plan template?')) {
      this.plans.update(plans => plans.filter(p => p.id !== id));
    }
  }

  addFeature() {
    this.formData.features.push('');
  }

  removeFeature(index: number) {
    this.formData.features.splice(index, 1);
  }

  savePlan() {
    const features = this.formData.features.filter(f => f.trim() !== '');

    if (this.showEditModal && this.editingPlanId) {
      // Update existing
      this.plans.update(plans =>
        plans.map(p => p.id === this.editingPlanId ? {
          ...p,
          ...this.formData,
          features
        } : p)
      );
    } else {
      // Create new
      const newPlan: PlanTemplate = {
        id: Math.max(...this.plans().map(p => p.id), 0) + 1,
        ...this.formData,
        features,
        subscriberCount: 0
      };
      this.plans.update(plans => [...plans, newPlan]);
    }

    this.closeModal();
  }

  closeModal() {
    this.showCreateModal = false;
    this.showEditModal = false;
    this.editingPlanId = null;
    this.formData = {
      name: '',
      description: '',
      price: 0,
      currency: 'USD',
      billingCycle: 'monthly',
      trialDays: 0,
      features: [''],
      isActive: true
    };
  }
}
