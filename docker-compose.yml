version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: exitsaas-db
    environment:
      POSTGRES_DB: ${DB_NAME:-exitsaas}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: '-c max_connections=100'
    ports:
      - '${DB_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/src/scripts/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./api/src/scripts/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - exitsaas-network
    restart: unless-stopped

  # API Service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: exitsaas-api
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${API_PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-exitsaas}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_POOL_SIZE: 20
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      JWT_EXPIRY: ${JWT_EXPIRY:-24h}
      REFRESH_TOKEN_EXPIRY: ${REFRESH_TOKEN_EXPIRY:-7d}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_DIR: /var/log/exitsaas
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4200}
    ports:
      - '${API_PORT:-3000}:3000'
    volumes:
      - ./api/src:/app/src
      - /var/log/exitsaas:/var/log/exitsaas
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${API_PORT:-3000}/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - exitsaas-network
    restart: unless-stopped

  # Web Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        ANGULAR_ENV: ${ANGULAR_ENV:-production}
    container_name: exitsaas-web
    environment:
      API_URL: ${API_URL:-http://api:3000/api}
      APP_ENVIRONMENT: ${ANGULAR_ENV:-production}
    ports:
      - '${WEB_PORT:-4200}:80'
    volumes:
      - ./web/dist/exitsaas:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - exitsaas-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: exitsaas-nginx
    ports:
      - '${NGINX_PORT:-80}:80'
      - '${NGINX_HTTPS_PORT:-443}:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - api
      - web
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - exitsaas-network
    restart: unless-stopped

  # pgAdmin (Database Management UI - Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: exitsaas-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - exitsaas-network
    restart: unless-stopped
    profiles:
      - dev

networks:
  exitsaas-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  nginx_cache:
    driver: local
